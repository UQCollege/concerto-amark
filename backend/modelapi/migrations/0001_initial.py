# Generated by Django 5.1.6 on 2025-04-21 05:25

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BEClass',
            fields=[
                ('class_name', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('usertype', models.CharField(choices=[('Rater', 'Rater'), ('Teacher', 'Teacher'), ('Admin', 'Admin'), ('Admin-Rater', 'Admin-Rater')], default='Rater', max_length=20)),
                ('username', models.CharField(max_length=100, unique=True)),
                ('rater_digital_id', models.CharField(max_length=100, unique=True)),
                ('active', models.BooleanField(default=True)),
                ('task_access', models.IntegerField(default=1)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('classes', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='teacher_classes', to='modelapi.beclass')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Audit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('update_date', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
                ('update_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='update_audit', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('audit_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, to='modelapi.audit')),
                ('student_name', models.CharField(max_length=50, primary_key=True, serialize=False, unique=True)),
                ('last_name', models.CharField(max_length=100, null=True)),
                ('first_name', models.CharField(max_length=100, null=True)),
                ('classes', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='student_classes', to='modelapi.beclass')),
            ],
            bases=('modelapi.audit',),
        ),
        migrations.CreateModel(
            name='WritingTask',
            fields=[
                ('audit_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='modelapi.audit')),
                ('started_time', models.DateTimeField()),
                ('trait', models.CharField(max_length=100, null=True)),
                ('assign_all', models.BooleanField(default=False)),
                ('response', models.TextField()),
                ('words_count', models.IntegerField(null=True)),
                ('student_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='modelapi.student')),
            ],
            bases=('modelapi.audit',),
        ),
        migrations.CreateModel(
            name='AssessmentTask',
            fields=[
                ('audit_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='modelapi.audit')),
                ('ta', models.IntegerField(null=True)),
                ('gra', models.IntegerField(null=True)),
                ('voc', models.IntegerField(null=True)),
                ('coco', models.IntegerField(null=True)),
                ('completed', models.BooleanField(default=False)),
                ('comments', models.CharField(max_length=250, null=True)),
                ('rater', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to=settings.AUTH_USER_MODEL)),
                ('writing_task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='modelapi.writingtask')),
            ],
            bases=('modelapi.audit',),
        ),
    ]
